package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.swing.*;
import java.io.IOException; 
import java.io.FileWriter;
import load_playlist.*;


public class PlaylistGUI extends JFrame implements ActionListener{

    private NewNewGUIMusicPlayer mainPlayer;
    Playlist loadedPlaylist = new Playlist();

    public PlaylistGUI(NewNewGUIMusicPlayer player ) {
        mainPlayer = player;
        initComponents();
        addActionEvents();
    }

    String selected;
    FileWriter myWriter2;
    JTextField jtext1;
    String[] playlist;
    boolean isActive=true;
    JList<String> songModelList;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tracksLabel = new javax.swing.JLabel();
        selectedSongsLabel = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        playlistScrollPane = new javax.swing.JScrollPane();
        playlistList = new javax.swing.JList<>();
        songScrollPane = new javax.swing.JScrollPane();
        songList = new javax.swing.JList<>();
        TitleLabel = new javax.swing.JLabel();
        DurationLabel = new javax.swing.JLabel();
        songNameLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        jtext1 = new JTextField();

      int count=1;
      int counter=0;
      String input;
      Scanner myObj;
      
      int indexesoftracks[];
      playlist = new String[0];
      int playlistlength=0;
      String nameoffile;
      FileWriter myWriter2;

      
    
      

      File folder = new File ("./src/main/resources/tracks");
      File[] listOfFiles = folder.listFiles();

        try{
            listOfFiles[0].exists();
        }
        catch (NullPointerException ex){
            songNameLabel.setText("No files found.");
        }
        if(listOfFiles[0].exists()){
          playlist = new String[listOfFiles.length];
          indexesoftracks = new int[listOfFiles.length];

          for (int i = 0; i < listOfFiles.length; i++) {
              if (listOfFiles[i].isFile()) {
                  playlist[i] = listOfFiles[i].getName();
                  indexesoftracks[i]=i+1;
                  playlistlength++;

              }
          }
      }

        setName("playlistFrame"); // NOI18N

        tracksLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tracksLabel.setText("Tracks");

        

        jtext1.setFont(new java.awt.Font("Tahoma", 0, 18));
        jtext1.setText("New Playlist");

        selectedSongsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        selectedSongsLabel.setText("Selected Song");

        loadButton.setText("Load Playlist");

        saveButton.setText("Save Playlist");

        addButton.setText("Add");

        playButton.setText("Play");

        
        playlistList.setModel(new DefaultListModel<String>() {
            
            String[] strings = {"Empty"};
            //public int getSize() { return strings.length; }
            //public String getElementAt(int i) { return strings[i]; }
        });

        DefaultListModel model = (DefaultListModel) playlistList.getModel();
        
        for (int z=0; z< listOfFiles.length; z++)
        {
            model.addElement(playlist[z]);
//            System.out.println(playlist[z]);
        }

        playlistScrollPane.setViewportView(playlistList);

        songList.setModel(new DefaultListModel<String>() {
            String[] strings = {"item"};
            //public int getSize() { return strings.length; }
            //public String getElementAt(int i) { return strings[i]; }
        });
        DefaultListModel model2 = (DefaultListModel) songList.getModel();
            model2.addElement("test");

        songScrollPane.setViewportView(songList);

        TitleLabel.setText("Song Title:");

        DurationLabel.setText("Duration:");

        songNameLabel.setText("\"Song Name\"");

        timeLabel.setText("00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(tracksLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(playlistScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(songScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtext1))
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectedSongsLabel)
                            .addComponent(timeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(songNameLabel)
                            .addComponent(DurationLabel)
                            .addComponent(TitleLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tracksLabel)
                    .addComponent(jtext1))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadButton)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(addButton))
                    .addComponent(playlistScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(songScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(selectedSongsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(DurationLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(playButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeLabel)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private javax.swing.JButton loadButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel tracksLabel;
    private javax.swing.JLabel selectedSongsLabel;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel DurationLabel;
    private javax.swing.JLabel songNameLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JList<String> playlistList;
    private javax.swing.JList<String> songList;
    private javax.swing.JScrollPane playlistScrollPane;
    private javax.swing.JScrollPane songScrollPane;
    //private javax.swing.JTextField jtext1;
    


    public void addActionEvents(){
        //registering action listener to buttons
        loadButton.addActionListener(this);
        addButton.addActionListener(this);
        saveButton.addActionListener(this);
        playButton.addActionListener(this);


        loadButton.setActionCommand("load");
        addButton.setActionCommand("add");
        saveButton.setActionCommand("save");
        playButton.setActionCommand("play");
        
    }

//    public String[] getSongs(){
//        String[] songs = new String[songList.getModel().getSize()];
//
//        for(int i=0; i<songs.length; i++) {
//            songs[i] = songList.getModel().getElementAt(i);
//        }
//        return songs;
//    }

    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("add")) {

            selected = playlistList.getSelectedValue();
            DefaultListModel model2 = (DefaultListModel) songList.getModel();
            model2.addElement(selected);

//            loadedPlaylist.addSong(playlistList.getSelectedValue());

        }

        if (e.getActionCommand().equals("play")) {
            isActive=false;
//            getSongs();

            if (loadedPlaylist.name==null) {
                songNameLabel.setText("No File Selected!");
            }
            else{
                mainPlayer.setLoadedPlaylist(loadedPlaylist);
                this.dispose();
            }
        }        

        if (e.getActionCommand().equals("load")) {
            Load_Playlist_Filechooser choosePlaylist = new Load_Playlist_Filechooser();
            Map <String, String> fileAttrMap = new HashMap<>();

            PlaylistCreator createPlaylist = new PlaylistCreator();
            fileAttrMap = choosePlaylist.ChooseFile();
            Playlist newPlay = createPlaylist.CreatePlaylist(fileAttrMap.get("name"), fileAttrMap.get("absolutePath"));
            

            for (int i=0; i < newPlay.getSongs().size(); i++) {
                System.out.println(newPlay.getSongs().get(i).SongFile.getAbsolutePath());
            }

            //Redo to append the newPlay attributes on the loadedPlaylist
            loadedPlaylist = newPlay;
            jtext1.setText(loadedPlaylist.name);
            DefaultListModel loadPlaylistModel = new DefaultListModel();

            for (Song song : loadedPlaylist.songs) {
                loadPlaylistModel.addElement(song.Name);
            }
            songList.setModel(loadPlaylistModel);
            
            
        }

        if( e.getActionCommand().equals("save")){
            DefaultListModel model2 = (DefaultListModel) songList.getModel();
            playlist = new String[model2.getSize()];

            for (int t=0; t<model2.getSize(); t++)
            {
                playlist[t] = String.valueOf(model2.getElementAt(t));
            }
            String input2;
            input2 = jtext1.getText();
            try {
                //File myplaylist = new File(input2+".txt", "./GUI/playlists");
                File myplaylist = new File("./src/main/resources/playlists/", input2+".txt");
                if (myplaylist.createNewFile()) {
                  System.out.println("File created: " + myplaylist.getName());
                } else {
                  System.out.println("File already exists.");
                }
              } catch (IOException e2) {
                System.out.println("An error occurred.");
                e2.printStackTrace();
              }
              
               try {
                myWriter2 = new FileWriter("./src/main/resources/playlists/"+input2+".txt");
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
              for(int r=0; r<model2.getSize(); r++)
              {
                try {
                    myWriter2.write(playlist[r]+"\r");
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
              }
              try {
                myWriter2.close();
            } catch (IOException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
        }
    }

    public void display(){
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String[] args){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaylistGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    

    
    // End of variables declaration//GEN-END:variables
    
}